// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  fullName          String?
  givenName         String?
  familyName        String?
  avatar            String?
  avatarFallback    String?
  password          String?
  role      Role     @default(user)
  status    Status     @default(active)
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  inventories       Inventory[]         @relation("InventoryOwner")
  inventoryAccesses InventoryAccess[]   @relation("InventoryAccessUser")
  inventoryMessages InventoryMessage[]
}

model Account {
  id           String   @id @default(uuid())
  provider     Provider
  providerId   String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([provider, providerId])
}

enum Role {
  guest
  user
  admin
}

enum Status {
  active
  blocked
}

enum Provider {
  google
  github
}

enum InventoryCategory {
  equipment
  furniture
  book
  other
}

model Inventory {
  id          String              @id @default(uuid())
  title       String
  description String?
  category    InventoryCategory
  imageUrl    String?
  tags        InventoryTagOnItem[]
  isPublic    Boolean             @default(false)

  ownerId     String
  owner       User                @relation("InventoryOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  accessList  InventoryAccess[]

  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  version     Int                 @default(1)

  customIdElements CustomIdElement[]
  inventoryField InventoryField[]
  inventoryMessage InventoryMessage []

  @@index([title])
  @@index([category])
}

model Tag {
  id    String              @id @default(uuid())
  name  String              @unique
  items InventoryTagOnItem[]
}

model InventoryTagOnItem {
  inventoryId String
  tagId       String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@id([inventoryId, tagId])
}

model InventoryAccess {
  inventoryId String
  userId      String
  inventory   Inventory         @relation(fields: [inventoryId], references: [id])
  user        User              @relation("InventoryAccessUser", fields: [userId], references: [id], onDelete: Cascade)

  @@id([inventoryId, userId])
}

model InventoryField {
  id          String       @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  label       String
  description String?
  type        FieldType
  orderIndex  Int
  showInTable Boolean   @default(false)
}

enum FieldType {
  single_line_text
  multi_line_text
  number
  link
  boolean
}

model CustomIdElement {
  id           String    @id @default(uuid())
  inventoryId  String
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  orderIndex   Int
  type         IdSeqType
  value        String
  separator    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IdSeqType {
  fixed
  guid
  date
  seq
  rand6
  rand9
  rand20
  rand32
}

model InventoryMessage {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  text        String
  createdAt   DateTime  @default(now())

  @@index([inventoryId])
  @@index([userId])
}
